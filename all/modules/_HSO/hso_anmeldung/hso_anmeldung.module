<?php
/**
 * CAUTION!
 *
 * This implementation needs Webform 4.0 and higher to work correctly.
 */

/* --------------------------------------------------
 * Constants
 * --------------------------------------------------*/
/**
 * Default Anmeldungs form.
 */
define('ANMELDUNG_BRAND_EMAIL', '@hso.vantage.ch');

/**
 * Default Anmeldungs form.
 */
define('ANMELDUNG_DEFAULT', 264);

/**
 * Reservation Anmeldungs form.
 */
define('ANMELDUNG_RESERVATION', 76045);

/**
 * ECDL Anmeldungs form.
 */
define('ANMELDUNG_ECDL', 476);

/**
 * Informationsanlässe Anmeldungs form.
 */
define('ANMELDUNG_INFO', 35254);

/**
 * Kontakt form.
 */
define('KONTAKT_FORM', 1052); // HSO: 1052

/**
 * Bildungsberatung form.
 */
define('BILDUNGSBERATUNG_FORM', 1335); // HSO: 1335

/**
 * Broschüre bestellen form.
 */
define('BROSCHUERE_BESTELLEN_FORM', 1336); // HSO: 1336

/**
 * Broschüre per Post bestellen form.
 */
define('BROSCHUERE_POST_FORM', 14006);

/**
 * AGB nid.
 */
define('AGB_NID', 1463); // HSO: 1036


/**
 * Implements hook_menu
 */
function hso_anmeldung_menu() {
  $items = array();
  $items['get_anmeldung/%'] = array(
    'title' => 'Get Anmeldung PDF',
    'access callback' => TRUE,
    'page callback' => '_hso_get_anmeldung_pdf',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  // dynamically loaded select boxes in brochure form
  $items['get_graduations/%'] = array(
    'title' => 'Get graduations of selected segment',
    //'access callback' => TRUE,
    'access arguments' => array('access content'),
    'page callback' => '_hso_get_graduations_callback',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  $items['get_courses/%/%'] = array(
    'title' => 'Get all courses of selected education degree',
    'access callback' => TRUE,
    'page callback' => '_hso_get_courses_callback',
    'page arguments' => array(1, 2),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Downloads / shows the pdf with the given file name from the private folder.
 *
 * @param string $pdf_uri          A stream, referenced as "scheme://target".
 * @param string $filename         The filename of the downloaded file.
 * @param bool   $show_file_inline Flag, if TRUE shows the file inline (in the
 *                                 browser), otherwise downloads the file to
 *                                 the client.
 * @param int    $valid_duration   Duration during which the file is valid
 *                                 (default: -1 meaning no time limit)
 */
function hso_anmeldung_transfer_pdf($pdf_uri, $filename, $show_file_inline = FALSE, $valid_duration = -1) {
  // get stream wrapper instance for pdf
  $stream_wrapper = file_stream_wrapper_get_instance_by_uri($pdf_uri);
  $pdf_path = $stream_wrapper->realpath();

  if (file_exists($pdf_path)) {
    if ($valid_duration < 0 || filemtime($pdf_path) >= time() - $valid_duration) {
      $content_dispo = $show_file_inline ? 'inline' : 'attachment';
      $content_dispo .= '; filename="' . $filename . '"';
      file_transfer($pdf_uri, array(
        'Cache-control' => 'private',
        'Content-Type' => 'application/pdf', // 'application/octet-stream'
        'Content-Disposition' => $content_dispo,
        'Content-Length' => filesize($pdf_path)
      ));
    }
  }
  drupal_not_found();
  drupal_exit();
}

/**
 * Menu callback of a PDF download request.
 *
 * @param $hash    string    Unique string indicating the contract pdf to be
 *                 downloaded.
 */
function _hso_get_anmeldung_pdf($hash) {
  if (preg_match('/^[a-z0-9]{32}$/i', $hash)) {
    $pdf = 'private://anmeldung/anmeldung_logo_' . $hash . '.pdf';
    hso_anmeldung_transfer_pdf($pdf, 'Ausbildungsvertrag.pdf', FALSE, 28 * 86400);
  }
  drupal_not_found();
  drupal_exit();
}

function create_pdf_token($sid) {
  return md5($sid . '2I7L1N1');
}


/* --------------------------------------------------------------
 * Alter HSO Confirmation-Mails (with contract as PDF attachment)
 * -------------------------------------------------------------*/

/**
 * Implements hook_mail_alter
 */
function hso_anmeldung_mail_alter(&$message) {
  if ($message['module'] == 'webform') {
    //
    // Define the location component id for all simple webforms,
    // e.g. component-id for component Standort in webform Kontakt (=4)
    $recipient_location = array(
      KONTAKT_FORM => 4,  // Kontakt
      BILDUNGSBERATUNG_FORM => 10, // Bildungsberatung
      BROSCHUERE_BESTELLEN_FORM => 14,   // Broschüre bestellen
      BROSCHUERE_POST_FORM => 10  // Broschüre per Post bestellen
    );
    $submission_data = $message['params']['submission']->data;
    if (array_key_exists($message['params']['email']['nid'], $recipient_location)) {
      //
      // Confirmation mails for simple forms: Kontakt, Bildungsberatung, Broschüre webform...
      //
      // Send mail to location@hso.vantage.ch
      $location_field = $recipient_location[$message['params']['email']['nid']];
      if (array_key_exists($location_field, $submission_data) && !empty($submission_data[$location_field][0])) {
        $message['to'] = array(
          'name' => $submission_data[$location_field][0],
          'mail' => $submission_data[$location_field][0] . ANMELDUNG_BRAND_EMAIL
        );
      }

    }
    else {
      //
      // Confirmation mails from Anmelde-webforms
      // Alter mail if custom form template are used (Client and Admin email with attachment)
      $template = variable_get('webform_template_' . $message['params']['email']['nid'] . '_' . $message['params']['email']['eid'], 'default');
      if (in_array($template, array('admin', 'client'))) {
        $message['send'] = FALSE;
        $webform_components = $message['params']['node']->webform['components'];
        $course_time_nid = FALSE;
        $anrede = '';
        $client_name = '';
        foreach ($webform_components as $key => $data) {
          if ($data['form_key'] == 'course_times_nid') {
            // get course time nid from form submission
            $course_time_nid = $submission_data[$key][0];
          }
          else if ($data['form_key'] == 'anrede') {
            // get anrede
            $anrede = $submission_data[$key][0];
          }
          else if ($data['form_key'] == 'name') {
            // get name
            $client_name = ucwords(strtolower($submission_data[$key][0]));
          }
        }
        $grussformel = ($anrede == 'Herr' ? 'Sehr geehrter Herr ' : ($anrede == 'Frau' ? 'Sehr geehrte Frau ' : 'Sehr geehrte/r Herr/Frau ')) . $client_name;

        //
        // load course time and fill mail template with the node data
        if ($course_time_nid) {
          $course_time_node = node_load($course_time_nid);
          if ($course_time_node && !empty($course_time_node->field_course)) {
            $message['send'] = TRUE;
            $course = node_load($course_time_node->field_course[LANGUAGE_NONE][0]['target_id']);
            $segment = !empty($course->field_segment) ? taxonomy_term_load($course->field_segment[LANGUAGE_NONE][0]['tid']) : FALSE;
            $study_variant = isset($course_time_node->field_study_variant[LANGUAGE_NONE][0]['tid']) ?
              taxonomy_term_load($course_time_node->field_study_variant[LANGUAGE_NONE][0]['tid']) : false;
            $location = !empty($course_time_node->field_location) ? node_load($course_time_node->field_location[LANGUAGE_NONE][0]['target_id']) : FALSE;
            $contact = FALSE;
            if ($course && $location) {
              $contact = _hso_get_contact($course->nid, $location->nid);
            }
            $address = '';
            if ($location) {
              $address .= $location->field_address[LANGUAGE_NONE][0]['thoroughfare'] . "\n";
              $address .= $location->field_address[LANGUAGE_NONE][0]['postal_code'] . ' ';
              $address .= $location->field_address[LANGUAGE_NONE][0]['locality'];
            }
            $now = time();
            $start_timestamp = strtotime($course_time_node->field_course_date[LANGUAGE_NONE][0]['value']);
            $res_days = min(round(($start_timestamp - $now) / 86400 -10), 30) . ' days';
            $res_end_timestamp = strtotime($res_days);

            //
            // assign mail tokens
            $sid = $message['params']['submission']->sid;
            $token = create_pdf_token($sid);
            $to_search = array(
              '%log_id%' => $sid,
              '%pdf_link%' => url('get_anmeldung/' . $token, array('absolute' => TRUE)),
              '%course_title%' => $course->title,
              '%segment_name%' => $segment ? $segment->name : '-',
              '%location_name%' => $location ? $location->title : '-',
              '%location_address%' => $address,
              '%course_time_start_date%' => date('d.m.Y', $start_timestamp),
              '%course_time_start_time%' => date('H:i', $start_timestamp),
              '%course_time_end_date%' => $course_time_node->field_course_date[LANGUAGE_NONE][0]['value2'] ? date('d.m.Y', strtotime($course_time_node->field_course_date[LANGUAGE_NONE][0]['value2'])) : '-',
              '%gruss_formel%' => $grussformel,
              '%contact_name%' => $contact ? $contact->title : '',
              '%contact_phone%' => $contact ? $contact->field_phone[LANGUAGE_NONE][0]['value'] : '',
              '%contact_email%' => $contact ? $contact->field_email[LANGUAGE_NONE][0]['email'] : '',
              '%course_time_variante%' => $study_variant ? $study_variant->name : (!empty($course_time_node->body) ? $course_time_node->body[LANGUAGE_NONE][0]['value'] : ''),
              '%reservation_end_date%' => date('d.m.Y', $res_end_timestamp),
            );

            // replace tokens with values in mail and complete mail with attachment and address
            $message['subject'] = str_replace(array_keys($to_search), array_values($to_search), $message['subject']);
            $message['params']['plaintext'] = str_replace(array_keys($to_search), array_values($to_search), $message['params']['plaintext']);
            if ($template == 'admin') {
              //
              // override recipient address for Admin mail and attach pdfs
              $message['to'] = array('name' => 'HSO Anmeldedienst', 'mail' => 'info@hso.vantage.ch');
              $message['params']['attachments'][] = _hso_make_anmeldung_pdf($location, $segment, $contact, $grussformel, $course, $course_time_node, $webform_components, $submission_data, $sid, FALSE);

            }
            else {
              //
              // override sending mail address to responsible location manager address and attach pdf
              if ($contact && $course_time_node->field_template[LANGUAGE_NONE][0]['value'] != 'ecdl') {
                $message['from'] = array('name' => $contact->title, 'mail' => $contact->field_email[LANGUAGE_NONE][0]['email']);
                unset($message['headers']['From']);
              }
              else if ($location) {
                // send to main address course location
                $message['from'] = array('name' => $location->title, 'mail' => $location->field_email[LANGUAGE_NONE][0]['email']);
              }
              $message['params']['attachments'][] = _hso_make_anmeldung_pdf($location, $segment, $contact, $grussformel, $course, $course_time_node, $webform_components, $submission_data, $sid, TRUE);
              //$message['params']['attachments'][] = _hso_get_agb_file();

            }
          }
        }
      }
    }
  }
}

/**
 * Get the contact responsible for the course at the given location (branch).
 *
 * @param $course_nid
 * @param $location_nid
 */
function _hso_get_contact($course_nid, $location_nid) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'contact')
    ->fieldCondition('field_courses', 'target_id', $course_nid)
    ->fieldCondition('field_locations', 'target_id', $location_nid)
    ->range(0, 1);
  $result = $query->execute();
  if (isset($result['node'])) {
    return node_load(key($result['node']));
  }
  return FALSE;
}

/**
 * Returns the AGB pdf of the HSO in the template folder.
 * @return StdClass
 */
function _hso_get_agb_file() {
  $file = new StdClass();
  $file->filename = 'AGB HSO.pdf';
  $file->filepath = drupal_get_path('module', 'hso_anmeldung') . '/html_templates/agb_hso.pdf';
  $file->filemime = 'application/pdf';

  return $file;
}

/**
 * Replace the tokens in the html-template with the given course time data and
 * create pdf from it.
 *
 * Destination where to send the document. It can take one of the following
 * values:
 * <ul>
 *  <li>I: send the file inline to the browser (default). The plug-in is used
 *  if available. The name given by name is used when one selects the "Save as"
 *  option on the link generating the PDF.</li>
 *  <li>D: send to the browser and force a file download with the name given by
 *  name.</li>
 *  <li>F: save to a local server file with the name given by name.</li>
 *  <li>S: return the document as a string (name is ignored).</li>
 *  <li>FI: equivalent to F + I option</li>
 *  <li>FD: equivalent to F + D option</li>
 *  <li>E: return the document as base64 mime multi-part email attachment (RFC
 *  2045)</li>
 * </ul>
 *
 */
function _hso_make_anmeldung_pdf($location, $segment, $contact, $grussformel, $course, $course_time_node, $webform_components, $submission, $submission_sid, $to_client) {
  //
  // do not create a PDF for info events
  $template = $course_time_node->field_template[LANGUAGE_NONE][0]['value'];
  if ($template == 'infoevent') {
    return;
  }

  $to_search = array();
  $additional_fields = array();
  $mod_count = 0;

  // loop through all webform fields and get submitted values
  foreach ($webform_components as $key => $data) {
    //
    // check visibility of webform component
    if (!hso_anmeldung_webform_component_visible($data, $course)) {
      continue;
    }

    //
    // get field value in submission
    if (array_key_exists($key, $submission)) {
      if (!empty($data['extra']['hso_anmeldung_is_additional'])) {
        $additional_fields[] = sprintf('%-26s', $data['name'] . ':') . $submission[$key][0] . '\par';
      }
      else {
        $to_search['%' . strtoupper($data['form_key']) . '%'] = $submission[$key][0] ? $submission[$key][0] : '';
      }
      if ($template == 'ecdl' && preg_match('/^m(\d+)$/', $data['form_key']) && $submission[$key][0]) {
        // count number of selected modules
        $mod_count++;
      }
    }
    elseif ($template == 'ecdl' && preg_match('/^m(\d+)$/', $data['form_key'])) {
      $to_search['%' . strtoupper($data['form_key']) . '%'] = ' ';
    }
  }
  if ($template == 'ecdl') {
    $to_search['%NOFMODULE%'] = $mod_count;
    $to_search['%KOSTEN%'] = $mod_count * 65;
  }
  $study_variant = isset($course_time_node->field_study_variant[LANGUAGE_NONE][0]['tid']) ?
    taxonomy_term_load($course_time_node->field_study_variant[LANGUAGE_NONE][0]['tid']) : false;
  $course_time_description = $study_variant ? $study_variant->name : '';
  foreach($location->field_teaching_times[LANGUAGE_NONE] as $index => $teaching_time) {
    $field_coll = field_collection_item_load($teaching_time['value']);
    if ($study_variant->tid == $field_coll->field_study_variant[LANGUAGE_NONE][0]['tid']) {
      $course_time_description .= isset($field_coll->field_variant_teaching_times[LANGUAGE_NONE][0]['safe_value']) ?
        ', ' . $field_coll->field_variant_teaching_times[LANGUAGE_NONE][0]['safe_value'] : '';
    }
  }
  $to_search['%ADDITIONALFIELDS%'] = implode(PHP_EOL, $additional_fields);
  $to_search['%LEHRGANG%'] = $course->title . (empty($course_time_description) ? '' : ', ' . $course_time_description);
  $to_search['%ABTEILUNG%'] = $segment ? $segment->name : '-';
  $to_search['%DAUERVON%'] = date('d.m.Y', strtotime($course_time_node->field_course_date[LANGUAGE_NONE][0]['value']));
  $to_search['%DAUERBIS%'] = $course_time_node->field_course_date[LANGUAGE_NONE][0]['value2'] ? date('d.m.Y', strtotime($course_time_node->field_course_date[LANGUAGE_NONE][0]['value2'])) : '-';
  $to_search['%KONTAKTTEL%'] = $contact ? $contact->field_phone[LANGUAGE_NONE][0]['value'] : '';
  $to_search['%KONTAKTPERSON%'] = $contact ? $contact->title : '';
  $to_search['%KONTAKTEMAIL%'] = $contact ? $contact->field_email[LANGUAGE_NONE][0]['email'] : '';
  $to_search['%LOCATION%'] = $location ? $location->title : '';
  $to_search['%HSO_ADRESSE%'] = $location ? $location->field_address[LANGUAGE_NONE][0]['thoroughfare'] : '';
  $to_search['%HSO_PLZORT%'] = $location ? $location->field_address[LANGUAGE_NONE][0]['postal_code'] . ' ' . $location->field_address[LANGUAGE_NONE][0]['locality'] : '';
  $to_search['%HSO_TEL%'] = $location && isset($location->field_address[LANGUAGE_NONE][0]['phone_number']) ?
    $location->field_address[LANGUAGE_NONE][0]['phone_number'] : '';
  $to_search['%HSO_EMAIL%'] = $location && isset($location->field_email[LANGUAGE_NONE][0]['email']) ?
    $location->field_email[LANGUAGE_NONE][0]['email'] : '';

  $start_time = date('H:i', strtotime($course_time_node->field_course_date[LANGUAGE_NONE][0]['value']));
  $start_date = date('d.m.Y', strtotime($course_time_node->field_course_date[LANGUAGE_NONE][0]['value']));
  $to_search['%LGSTART%'] = $start_time == '00:00' ? $start_date : $start_date . ', ' . $start_time;
  $to_search['%DATUM%'] = date('d.m.Y');
  $to_search['%COSTS%'] = 'CHF ' . $course_time_node->field_brutto_price[LANGUAGE_NONE][0]['value'];
  $to_search['%GRUSSFORMEL%'] = $grussformel;
  // detail costs
  $detail_costs = $course_time_node->field_detailed_price[LANGUAGE_NONE][0]['value'];
  $to_search['%DETAILEDCOSTS%'] = $detail_costs;

  // get brand specific html file
  $brand_short = taxonomy_term_load($location->field_brand[LANGUAGE_NONE][0]['tid'])->name;
  $brand = ($brand_short != 'HSO') ? '_' . strtolower($brand_short) : '';
  $html_file = drupal_get_path('module', 'hso_anmeldung') . '/html_templates/' . $template . '_anmeldung_template' . $brand . '.html';

  // replace tokens in html file, if it exists
  if (file_exists($html_file)) {
    //libxml_use_internal_errors(true);
    $doc = new DOMDocument();
    $doc->loadHTMLFile($html_file);
    $doc->normalizeDocument();
    $pdf_string = $doc->saveHTML($doc->getElementsByTagName('style')->item(0));
    $pdf_string .= $doc->saveHTML($doc->getElementsByTagName('body')->item(0));
    $pdf_string = str_replace(array_keys($to_search), array_values($to_search), $pdf_string);
    $pdf_string = preg_replace("/%\w+%/", '', $pdf_string);

    // convert html string to pdf
    $dir_uri = file_stream_wrapper_get_instance_by_uri('private://anmeldung');
    $token = create_pdf_token($submission_sid);
    $filename = 'anmeldung_' . ($to_client ? 'logo_' : '') . $token . '.pdf';
    $filepath = $dir_uri->realpath() . '/' . $filename;
    $options = array(
      'title' => $to_client ? 'Anmeldereservation' : 'Anmeldung',
      'subject' => $brand_short,
      'author' => $brand_short,
      'keywords' => $brand_short . 'Anmeldung, tcpdf, PDF, Drupal, Pixelgarage',
      'header' => array(
        'callback' => array(
          'function' => '_hso_add_pdf_header',
          'context' => array(
            'client_copy' => $to_client ? 'yes' : 'no',
            'brand' => strtolower($brand_short),
          ),
        ),
      ),
      'footer' => array(
        'callback' => array(
          'function' => 'hso_add_pdf_footer',
          'context' => array(),
        ),
      ),
    );
    $pdf = tcpdf_document_instance($options);
    $pdf->setHtmlVSpace(array(
      'p' => array(
        array('h' => 1, 'n' => 0.1),
        array('h' => 1, 'n' => 0.1)
      )
    ));
    $pdf->writeHtml($pdf_string, TRUE, FALSE, TRUE, FALSE, '');
    $pdf->lastPage();
    $pdf->Output($filepath, 'F');


    // create file class and return it
    $file = new StdClass();
    if ($template == 'ecdl') {
      $file->filename = $to_client ? 'Anmeldereservation.pdf' : 'Anmeldung.pdf';
    }
    else {
      $file->filename = $to_client ? 'Ausbildungsvertrag.pdf' : 'Anmeldung.pdf';
    }
    $file->filepath = variable_get('file_private_path') . '/anmeldung/' . $filename;
    $file->filemime = 'application/pdf';
    return $file;

  }
  else {
    watchdog('Create Anmeldung PDF', 'The template file @file does not exist.', array('@file' => $html_file), WATCHDOG_ERROR);

  }
}


/**
 * Callback function to define header.
 *
 * @param $pdf_document
 * @param $context
 */
function _hso_add_pdf_header(&$pdf_document, $context) {
  if ($context['client_copy'] == 'yes') {
    // draw Logo top right, if document is for client
    $image_file = drupal_get_path('module', 'hso_anmeldung') . '/html_templates/template_logo_' . $context['brand'] . '.png';
    $pdf_document->Image($image_file, 5, 10, 30, '', '', '', 'T', 2, 300, 'R');
  }
}

/**
 * Callback function to define footer.
 *
 * @param $pdf_document
 * @param $context
 */
function _hso_add_pdf_footer(&$pdf_document, $context) {
  // no footer
}


/* --------------------------------------------------
 * HSO Anmeldung-Webform alteration
 * --------------------------------------------------*/

function &hso_anmeldung_session_data() {
  if (!isset($_SESSION['hso_anmeldung'])) {
    $_SESSION['hso_anmeldung'] = array();
  }
  return $_SESSION['hso_anmeldung'];
}


/**
 * Implements hook_form_alter().
 *
 * Alters the anmeldung webforms with additional text.
 */
function hso_anmeldung_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'webform_client_form_12649') {
    //
    // add course id to download leaflet form
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $session_data = &hso_anmeldung_session_data();
      if (arg(1) != 12649) {
        // called on course page load
        $session_data['course_nid'] = arg(1);
      }
      else {
        //  called in form submit handler
        $form['submitted']['course_nid']['#value'] = isset($session_data['course_nid']) ? $session_data['course_nid'] : NULL;
      }
    }

  }
  else if ($form_id == 'webform_client_form_' . ANMELDUNG_DEFAULT ||
    $form_id == 'webform_client_form_' . ANMELDUNG_RESERVATION ||
    $form_id == 'webform_client_form_' . ANMELDUNG_ECDL ||
    $form_id == 'webform_client_form_' . ANMELDUNG_INFO) {
    // extend all Anmeldungs-webforms (default, reservation, ecdl, infoanlass) with additional infos,
    // but only if they are shown (url = node/nid/anmeldung)
    if (arg(0) == 'node' && is_numeric(arg(1)) && (arg(2) == 'anmeldung' || arg(2) == 'reservation')) {
      // Anmeldung called from course time
      $course_time_node = node_load(arg(1));
      $prevent_access = $course_time_node->type != 'course_times' || !$course_time_node->status || empty($course_time_node->field_course);
      if ($prevent_access) {
        drupal_not_found();
        drupal_exit();
      }
    }
    else {
      // forms are not shown, don't alter them
      return;
    }

    // prepare to alter form with additional course time info's
    $form['submitted']['course_times_nid']['#value'] = $course_time_node->nid;
    $course = node_load($course_time_node->field_course[LANGUAGE_NONE][0]['target_id']);
    $segment = !empty($course->field_segment) ? taxonomy_term_load($course->field_segment[LANGUAGE_NONE][0]['tid']) : FALSE;
    $agb_nid = AGB_NID;

    // get AGB nid
    if ($segment && !empty($segment->field_agb_nid)) {
      $agb_nid = $segment->field_agb_nid[LANGUAGE_NONE][0]['value'];
    }

    // add additional price details
    $text = '';
    if (isset($form['submitted']['markup'])) {
      if (!empty($course_time_node->field_detailed_price) && !empty($course_time_node->field_detailed_price[LANGUAGE_NONE][0]['value'])) {
        $text = $course_time_node->field_detailed_price[LANGUAGE_NONE][0]['value'];
      }
      $form['submitted']['markup']['#markup'] = $text;
    }

    // add Anmeldungs conditions
    if (isset($form['submitted']['agbcheck'])) {
      if ($form_id == 'webform_client_form_' . ANMELDUNG_ECDL) {
        // ecdl form
        $text = 'Ich habe die ' . l('Allgemeinen Geschäftsbedingungen (AGB)', 'node/' . $agb_nid, array(
            'html' => TRUE,
            'attributes' => array('target' => '_blank')
          )) .
          ' gelesen und bin mir &#252;ber die Kosten von <strong id="agb_costs">CHF 0.--</strong> bewusst, ' .
          'welche mir auch bei Nicht-Erscheinen zum Pr&#252;fungstermin verrechnet werden.';

      }
      else {
        // default & reservation form
        // add agb text
        $text = '* <strong>Ich habe die ' .
          l('Allgemeinen Geschäftsbedingungen', 'node/' . $agb_nid, array('html' => TRUE, 'attributes' => array('target' => '_blank'))) .
          ' sowie die Bestimmungen zu den ' .
          l('Kantonsbeiträgen', 'node/3128', array('html' => TRUE, 'attributes' => array('target' => '_blank'))) .
          ' gelesen und bin damit einverstanden.</strong><br />';

      }
      $form['submitted']['agbcheck']['#options'][1] = $text;
    }

    // show/hide fields
    _hso_anmeldung_check_form_fields($form['submitted'], $course);
  }
}


/* --------------------------------------------------
 * Webform submission alteration
 * --------------------------------------------------*/

/**
 * Add location and course information to submission, prior to saving it in the
 * database.
 *
 * @param $node
 *   The Webform node on which this submission was made.
 * @param $submission
 *   The Webform submission that is about to be saved to the database.
 */
function hso_anmeldung_webform_submission_presave($node, &$submission) {
  //
  // get location and course fields via course_times nid
  if (in_array($submission->nid, array(ANMELDUNG_DEFAULT, ANMELDUNG_RESERVATION, ANMELDUNG_INFO, ANMELDUNG_ECDL))) {
    // get course time nid from form, if any
    $course_time_nid = FALSE;
    $course_location_key = FALSE;
    $webform_components = $node->webform['components'];
    foreach ($webform_components as $key => $data) {
      if ($data['form_key'] == 'course_times_nid') {
        $course_time_nid = $submission->data[$key][0];
      }
      else if ($data['form_key'] == 'course_location_info') {
        $course_location_key = $key;
      }
    }

    // if course time nid has been found
    if ($course_time_nid) {
      $course_time_node = node_load($course_time_nid);
      if ($course_time_node) {
        $course = !empty($course_time_node->field_course) ? node_load($course_time_node->field_course[LANGUAGE_NONE][0]['target_id']) : NULL;
        $location = !empty($course_time_node->field_location) ? node_load($course_time_node->field_location[LANGUAGE_NONE][0]['target_id']) : NULL;
        $submission->data[$course_location_key][0] = $course->title . ': ' . $location->title;
      }
    }
  }
}

/**
 * Alters a anmeldungs-webform submissions before rendering.
 *
 * @param $renderable
 */
function hso_anmeldung_webform_submission_render_alter(&$renderable) {
  $submission = $renderable['#submission'];

  // only anmeldungs forms (default, reservation, ecdl)
  if (in_array($submission->nid, array(ANMELDUNG_DEFAULT, ANMELDUNG_ECDL, ANMELDUNG_RESERVATION))) {
    // get course time nid from form, if any
    $course_time_nid = FALSE;
    $webform_components = $renderable['#node']->webform['components'];
    foreach ($webform_components as $key => $data) {
      if ($data['form_key'] == 'course_times_nid') {
        $course_time_nid = $submission->data[$key][0];
        break;
      }
    }

    // if course time nid has been found
    if ($course_time_nid) {
      $course_time_node = node_load($course_time_nid);
      if ($course_time_node && !empty($course_time_node->field_course)) {
        $course = node_load($course_time_node->field_course[LANGUAGE_NONE][0]['target_id']);
        foreach ($webform_components as $key => $data) {
          if (!hso_anmeldung_webform_component_visible($data, $course)) {
            // unset renderable fields
            if (!empty($data['pid'])) {
              unset($renderable[$webform_components[$data['pid']]['form_key']][$data['form_key']]);
            }
            else {
              unset($renderable[$data['form_key']]);
            }
          }
        }
      }
    }
  }
}


/* --------------------------------------------------
 * Webform email form alteration
 * --------------------------------------------------*/

/**
 * Implements hook_form_FORM_ID_alter().
 * Extends the webform email templates.
 */
function hso_anmeldung_form_webform_email_edit_form_alter(&$form, &$form_state) {
  $form['template']['template_option']['#options']['client'] = 'Client Email (w/PDF)';
  $form['template']['template_option']['#options']['admin'] = 'Admin Email (w/PDF and h4i)';
  // webform v3 -> v4 difference
  $webform_nid = (isset($form['node'])) ? $form['node']['#value']->nid : $form['#node']->nid;
  $form['template']['template_option']['#default_value'] = variable_get('webform_template_' . $webform_nid . '_' . $form['eid']['#value'], 'default');
  $form['#submit'][] = 'hso_anmeldung_form_webform_email_edit_form_submit';
}

/**
 * Saves the chosen webform email template.
 */
function hso_anmeldung_form_webform_email_edit_form_submit($form, $form_state) {
  // webform v3 -> v4 difference
  $webform_nid = (isset($form['node'])) ? $form['node']['#value']->nid : $form['#node']->nid;
  variable_set('webform_template_' . $webform_nid . '_' . $form_state['values']['eid'], $form_state['values']['template_option']);
}


/* -------------------------------------------------------------
 * Webform component alteration
 *
 * Implements conditional fields for Anmeldungs webforms.
 * Condition is the course id, for which the Anmeldung is displayed.
 * -------------------------------------------------------------*/

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Extends the Anmeldung-webforms with HSO extra fields.
 */
function hso_anmeldung_form_webform_component_edit_form_alter(&$form, &$form_state) {
  $webform_nid = $form['nid']['#value'];  // webform node id

  if ($webform_nid == ANMELDUNG_DEFAULT || $webform_nid == ANMELDUNG_ECDL || $webform_nid == ANMELDUNG_EURO) {
    //
    // add submit function
    array_unshift($form['#submit'], 'hso_anmeldung_component_edit_submit');

    //
    // alter form with additional HSO fields
    $form['hso'] = array(
      '#type' => 'fieldset',
      '#title' => 'HSO Settings',
      '#access' => TRUE
    );
    $form['hso']['extra']['course_ids'] = array(
      '#type' => 'textfield',
      '#title' => 'Show only for these course ids',
      '#description' => 'Use the internal ID from HSO System. Leave blank to show for every course',
      '#default_value' => '',
    );
    $form['hso']['extra']['exclude_course_ids'] = array(
      '#type' => 'textfield',
      '#title' => 'Exclude for these course ids',
      '#description' => 'Use the internal ID from HSO System. Leave blank to show for every course',
      '#default_value' => '',
    );
    $form['hso']['extra']['custom_key'] = array(
      '#type' => 'textfield',
      '#title' => 'Custom key for the export file sent by email',
      '#description' => 'Leave blank if it\'s the same than field key',
      '#default_value' => '',
    );
    $form['hso']['extra']['is_additional'] = array(
      '#type' => 'checkbox',
      '#title' => 'Include as additional field into PDF',
      '#return_value' => 1,
    );

    //
    // set extra field values from DB
    $webform_cid = $form['cid']['#value'];  // webform comonent id
    if (!empty($webform_cid)) {
      $sql = "SELECT extra FROM {webform_component} where nid = :nid and cid = :cid";
      $result = db_query($sql, array(
        ':nid' => $webform_nid,
        ':cid' => $webform_cid
      ));
      if ($row = $result->fetchAssoc()) {
        $extra = unserialize($row['extra']);
        $form['hso']['extra']['course_ids']['#default_value'] = trim(isset($extra['hso_anmeldung_course_ids']) ? $extra['hso_anmeldung_course_ids'] : '');
        $form['hso']['extra']['exclude_course_ids']['#default_value'] = trim(isset($extra['hso_anmeldung_exclude_course_ids']) ? $extra['hso_anmeldung_exclude_course_ids'] : '');
        $form['hso']['extra']['custom_key']['#default_value'] = trim(isset($extra['hso_anmeldung_custom_key']) ? $extra['hso_anmeldung_custom_key'] : '');
        $form['hso']['extra']['is_additional']['#default_value'] = trim(isset($extra['hso_anmeldung_is_additional']) ? $extra['hso_anmeldung_is_additional'] : 0);
      }
    }
  }
}

function hso_anmeldung_component_edit_submit($form, &$form_state) {
  $form_state['values']['extra']['hso_anmeldung_course_ids'] = trim($form_state['values']['hso']['extra']['course_ids']);
  $form_state['values']['extra']['hso_anmeldung_exclude_course_ids'] = trim($form_state['values']['hso']['extra']['exclude_course_ids']);
  $form_state['values']['extra']['hso_anmeldung_custom_key'] = trim($form_state['values']['hso']['extra']['custom_key']);
  $form_state['values']['extra']['hso_anmeldung_is_additional'] = $form_state['values']['hso']['extra']['is_additional'];
  $form_state['values']['hso']['extra']['course_ids'] = '';
  $form_state['values']['hso']['extra']['custom_key'] = '';
  $form_state['values']['hso']['extra']['is_additional'] = NULL;
}


/**
 * Returns true, if the webform component is visible in the course Anmeldungs
 * webform, otherwise false.
 *
 * The given course is the condition for the visibility of the webform
 * component.
 */
function hso_anmeldung_webform_component_visible($webform_component, $course) {
  // show field if no course_int_id is given
  $course_int_id = isset($course->field_internal_id[LANGUAGE_NONE][0]['value']) ? $course->field_internal_id[LANGUAGE_NONE][0]['value'] : FALSE;
  if (!$course_int_id) {
    return TRUE;
  }

  // check, if conditional ids are given
  if (!empty($webform_component['extra']['hso_anmeldung_course_ids']) ||
    !empty($webform_component['extra']['hso_anmeldung_exclude_course_ids'])) {
    $conditional_courses = explode(',', $webform_component['extra']['hso_anmeldung_course_ids']);
    $exclude_conditional_courses = empty($webform_component['extra']['hso_anmeldung_exclude_course_ids']) ? array() : explode(',', $webform_component['extra']['hso_anmeldung_exclude_course_ids']);
    if (
      (!empty($conditional_courses) && !in_array($course_int_id, $conditional_courses)) ||
      (!empty($exclude_conditional_courses) && in_array($course_int_id, $exclude_conditional_courses))
    ) {
      return FALSE;
    }
  }
  // show webform component (field)
  return TRUE;
}

/**
 * Check recursively (fieldset), if field should be displayed or not according
 * to the extra hso settings.
 */
function _hso_anmeldung_check_form_fields(&$fields, $course) {
  $visible_fields = 0;

  foreach ($fields as $key => $element) {
    if (is_array($element) && isset($element['#webform_component'])) {
      $visible_fields++;
      $webform_component = $element['#webform_component'];

      if (!hso_anmeldung_webform_component_visible($webform_component, $course)) {
        $fields[$key]['#access'] = FALSE;
        $visible_fields--;
      }

      // recursive call for fieldsets
      if (isset($element['#type']) && $element['#type'] == 'fieldset') {
        $has_visible_fields = _hso_anmeldung_check_form_fields($fields[$key], $course);
        if (!$has_visible_fields) {
          $fields[$key]['#access'] = FALSE;
        }
      }
    }
  }
  return $visible_fields;
}

