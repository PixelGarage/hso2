<?php

require_once 'includes/node.lib.inc';

/**
 * Implements hook_init().
 *
 * Used to implement the Search Engine Referrer, showing all site elements tagged
 * with one of the search terms given in a search engine (e.g. Google).
 */
function hso_mods_init() {
	if (drupal_is_front_page() && $search_info = serapi_get_search()) {
		$keywords = strtolower($search_info['string']);
		$query = new EntityFieldQuery();
		$result = $query
			->entityCondition('entity_type', 'taxonomy_term')
			->propertyCondition('vid', 1)
			->propertyOrderBy('weight')
			->propertyOrderBy('name')
			->execute();
		if (isset($result['taxonomy_term'])) {
			$segments = taxonomy_term_load_multiple(array_keys($result['taxonomy_term']));
			foreach ($segments as $tid => $segment) {
				if (!empty($segment->field_seo_keywords)) {
					$s_keywords = array_unique(array_map('trim', array_map('strtolower', explode(PHP_EOL, $segment->field_seo_keywords[LANGUAGE_NONE][0]['value']))));
					foreach ($s_keywords as $k) {
						if (empty($k)) continue;
						if (strpos($keywords, $k) !== FALSE) {
							drupal_goto('taxonomy/term/' . $tid);
						}
					}
				}
			}
		}
	}
}

/**
 * Implements hook_entity_info_alter().
 */
function hso_mods_entity_info_alter(&$info) {
  $info['field_collection_item']['metatags'] = FALSE;
}

/* --------------------------------------------------
 * Set specific contexts for nodes and views
 * --------------------------------------------------*/

/**
 * Implements hook_node_view
 *
 * If a node is shown in full mode and is related to a segment, set a new segment
 * context (namespace = HSO, attribute = current_segment) to the segment term id.
 */
function hso_mods_node_view($node, $view_mode, $langcode) {
  // set special context only for the following nodes
  if (!in_array($node->type, array('course', 'course_times', 'news', 'page', 'video', 'webform', 'youtube_playlist'))) return;

  if ($view_mode == 'full') {
  	$node_to_check = $node;
  	if ($node->type == 'course_times') {
      // get the segment from the related course
  		if (!empty($node->field_course)) {
  			$node_to_check = node_load($node->field_course[LANGUAGE_NONE][0]['target_id']);
  		}
  	}
		if ($node->type == 'video') {
			$nid = feeds_get_feed_nid($node->nid, 'node');
			if ($nid) {
				$node_to_check = node_load($nid);
			}
  	}
  	$ctid = FALSE;
    /* no centers anymore)
  	if ($node_to_check->type == 'news' && !empty($node_to_check->field_centers)) {
	  	$ctid = $node_to_check->field_centers[LANGUAGE_NONE][0]['tid'];
  		context_set('hso', 'current_segment_center', $ctid);
  	} elseif ($node_to_check->type == 'page' && !empty($node_to_check->field_center)) {
	  	$ctid = $node_to_check->field_center[LANGUAGE_NONE][0]['tid'];
  		context_set('hso', 'current_segment_center', $ctid);
  	}
    */
  	if (isset($node_to_check->field_segment) && !empty($node_to_check->field_segment)) {
  		$tid = $node_to_check->field_segment[LANGUAGE_NONE][0]['tid'];
  		$tid = $tid == 5 ? 2 : $tid;  // Informatikschule -> Handelsschule
  		context_set('hso', 'current_segment', $tid);
  		if (!$ctid) {
	  		context_set('hso', 'current_segment_center', $tid);
	  	}
  		_hso_mods_trigger_context($tid);
  	} elseif (isset($node_to_check->field_segments) && !empty($node_to_check->field_segments)) {
  		$tid = $node_to_check->field_segments[LANGUAGE_NONE][0]['tid'];
  		$tid = $tid == 5 ? 2 : $tid;  // Informatikschule -> Handelsschule
  		context_set('hso', 'current_segment', $tid);
  		if (!$ctid) {
	  		context_set('hso', 'current_segment_center', $tid);
	  	}
  		_hso_mods_trigger_context($tid);
  	}
  }
}

/**
 * Implements of hook_taxonomy_term_view
 *
 * If a segment page is shown, set a new segment context
 * (namespace = HSO, attribute = current_segment) to the segment term id.
 */
function hso_mods_taxonomy_term_view($term, $view_mode, $langcode) {
  if ($term->vid == 1 && $view_mode == 'full') {
    // set segment Handelsschule for Informatikschule
    $tid = $term->tid == 5 ? 2 : $term->tid;
    context_set('hso', 'current_segment', $tid);
    //context_set('hso', 'current_segment_center', $tid);
  }
}

/**
 * Internal function to set all contexts with a given segment condition.
 * @param $segment_id
 */
function _hso_mods_trigger_context($segment_id) {
  $contexts = context_enabled_contexts();
  foreach ($contexts as $context_name => $data) {
    if (array_key_exists('node_taxonomy', $data->conditions) && in_array($segment_id, $data->conditions['node_taxonomy']['values'])) {
      context_condition_met($data, 'node_taxonomy');
    }
  }
}

/**
* Implements ctools_render_alter().
*
* This is done since hook_node_view never gets called if the node is rendered by Ctools.
*/
function hso_mods_ctools_render_alter($info, $page, $context) {
  if ($page && is_array($context['subtask']) && $context['subtask']['name'] == 'course_anmeldung') {
    //
    // set all context conditions for the specific course time,
    // for which the anmeldungs webform is displayed.
    $course_time = $context['contexts']['argument_entity_id:node_1']->data;
  	hso_mods_node_view($course_time, 'full', LANGUAGE_NONE);
  	$contexts = context_enabled_contexts();
		foreach ($contexts as $context_name => $data) {
			if (array_key_exists('node', $data->conditions) && in_array($course_time->type, $data->conditions['node']['values'])) {
				context_condition_met($data, 'node');
			}
		}
  } elseif ($page && isset($context['task']['admin path']) && $context['task']['admin path'] == 'taxonomy/term/%taxonomy_term') {
  	hso_mods_taxonomy_term_view($context['contexts']['argument_term_1']->data, 'full', LANGUAGE_NONE);
	} elseif ($page && isset($context['task']['admin path']) && $context['task']['admin path'] == 'node/%node') {
  	hso_mods_node_view($context['contexts']['argument_entity_id:node_1']->data, 'full', LANGUAGE_NONE);
	}
}


/* --------------------------------------------------
 * Themes and field formatters for date-time ranges
 * --------------------------------------------------*/
/**
 * Implements hook_field_formatter_info().
 */
function hso_mods_field_formatter_info() {
  return array(
    // the key must be unique, so it's best to prefix with your module's name.
    'hso_mods_date_vom_bis' => array(
      // the label is is what is displayed in the select box in the UI.
      'label' => t('Date Vom Bis'),
      // field types is the important bit!! List the field types your formatter is for.
      'field types' => array('datetime'),
      // You can usually leave 'multiple values' as follows:
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
    'hso_mods_date_start_ende' => array(
      // the label is is what is displayed in the select box in the UI.
      'label' => t('Date Start Ende'),
      // field types is the important bit!! List the field types your formatter is for.
      'field types' => array('datetime'),
      // You can usually leave 'multiple values' as follows:
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}
/**
 * Implements hook_field_formatter_view().
 */
function hso_mods_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  foreach ($items as $delta => $item) {
    $elements[$delta] = array(
      '#markup' => theme('hso_mods_formatter_'. $display['type'], array('element' => $item, 'field' => $instance)),
    );
  }
  return $elements;
}
/**
 * Implements hook_theme().
 */
function hso_mods_theme() {
  return array(
    // The theme function that our formatter uses:
    'hso_mods_formatter_hso_mods_date_vom_bis' => array(
      // Don't forget that all Drupal 7 theme functions have only one argument,
      // so you declare what variables get passed within that argument instead.
      // See http://drupal.org/node/224333#theme_changes
      'variables' => array('element' => NULL),
    ),
    'hso_mods_formatter_hso_mods_date_start_ende' => array(
      // Don't forget that all Drupal 7 theme functions have only one argument,
      // so you declare what variables get passed within that argument instead.
      // See http://drupal.org/node/224333#theme_changes
      'variables' => array('element' => NULL),
    ),
  );
}

function theme_hso_mods_formatter_hso_mods_date_vom_bis($element) {
	$from_date = strtotime($element['element']['value']);
  $date_start = explode(' ', $element['element']['value']);
  $date_end = explode(' ', $element['element']['value2']);
  $to_date = strtotime($element['element']['value2']);
  $has_end_date = $from_date != $to_date && !empty($date_end[0]);

  if ($has_end_date) {
    $string = '<strong>' . t('Vom') . '</strong> ';
  } else {
    $string = '<strong>' . t('Am') . '</strong> ';
  }
	if (date('H:i', $from_date) == '00:00') {
		$string .= date('d.m.Y', $from_date);
	} else {
		$string .= date('d.m.Y, H:i', $from_date);
	}
	if ($has_end_date) {
		$string .= ' <strong>' . t('bis') . '</strong> ' . date('d.m.Y', strtotime($element['element']['value2']));
	}
  return $string;
}
function theme_hso_mods_formatter_hso_mods_date_start_ende($element) {
	$from_date = strtotime($element['element']['value']);
	$string = t('Start') . ': ';
	if (date('H:i', $from_date) == '00:00') {
		$string .= date('d.m.Y', $from_date);
	} else {
		$string .= date('d.m.Y, H:i', $from_date);
	}
  if ($element['element']['value2']) {
    $end_date = strtotime($element['element']['value2']);
    if ($from_date != $end_date) {
      $string .= '<br />' . t('Ende') . ': ' . date('d.m.Y', $end_date);
    }
  }
  return $string;
}

/* --------------------------------------------------
 * HSO Pager with prev/next
 * --------------------------------------------------*/
/**
 * Implements hook_block_info
 */
function hso_mods_block_info() {
	$blocks['hso_pager'] = array(
    'info' => t('Content Prev/Next'), 
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view
 */
function hso_mods_block_view($delta = '') {
	$block = array();
	switch ($delta) {
		case 'hso_pager':
			if (arg(0) == 'node' && is_numeric(arg(1))) {
				$node = node_load(arg(1));
				$query_prev = new EntityFieldQuery();
				$query_prev->entityCondition('entity_type', 'node')
					->entityCondition('bundle', $node->type)
					->propertyCondition('status', 1)
					->range(0, 1);
				$query_next = new EntityFieldQuery();
				$query_next->entityCondition('entity_type', 'node')
					->entityCondition('bundle', $node->type)
					->propertyCondition('status', 1)
					->range(0, 1);
				$query_prev->propertyOrderBy('created', 'ASC');
				$query_prev->propertyCondition('created', $node->created, '>');
				$query_next->propertyOrderBy('created', 'DESC');
				$query_next->propertyCondition('created', $node->created, '<');
				$result_prev = $query_prev->execute();
				$result_next = $query_next->execute();
				$items = array();
				if (isset($result_prev['node'])) {
					$items[] = l('< ' . t('Previous Post'), 'node/' . key($result_prev['node']), array('attributes' => array('class' => array('pprevious'))));
				}
				if (isset($result_next['node'])) {
					$items[] = l(t('Next Post') . ' >', 'node/' . key($result_next['node']), array('attributes' => array('class' => array('nnext'))));
				}
				$block['content'] = theme('item_list', array('items' => $items));
			}
			break;
	}
  return $block;
}

/**
 * Implements hook_form_alter().
 *
 * Adapts search form blocks.
 */
function hso_mods_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form') {
  	if (in_array('views_exposed_form__blog__panel_pane_1', $form['#theme'])) {
			$form['#action'] = url('blog');
			$form['keys']['#attributes']['placeholder'] = 'HSO dursuchen';
		}
  } elseif ($form_id == 'search_block_form') {
		$form['search_block_form']['#attributes']['placeholder'] = 'HSO dursuchen';
  }
}


/* --------------------------------------------------
 * Brochure Webform select option definition
 * --------------------------------------------------*/

/**
 * Implements hook_menu
 */
function hso_mods_menu() {
  $items = array();
  // dynamically loaded select boxes in brochure form
  $items['get_graduations/%'] = array(
    'title' => 'Get graduations of selected segment',
    //'access callback' => TRUE,
    'access arguments' => array('access content'),
    'page callback' => '_hso_get_graduations_callback',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  $items['get_courses/%/%'] = array(
    'title' => 'Get all courses of selected education degree',
    'access callback' => TRUE,
    'page callback' => '_hso_get_courses_callback',
    'page arguments' => array(1,2),
    'type' => MENU_CALLBACK,
  );
  $items['get_course/%'] = array(
    'title' => 'Get a specific course',
    'access callback' => TRUE,
    'page callback' => '_hso_get_specific_course_callback',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Get all graduations of the specific segment.
 *
 * @param $segment_tid  int The term id of the segment.
 *
 * @return string
 */
function _hso_get_graduations_callback($segment_tid) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'course')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_segment', 'tid', $segment_tid);
  $result = $query->execute();
  $options = '<option value="-1" selected="selected">' . t('- Wähle einen Abschluss -') . "</option>\n";
  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $courses = node_load_multiple($nids);

    $tids = array();
    foreach ($courses as $course) {
      $tids[$course->field_fachgebiet[LANGUAGE_NONE][0]['tid']] = $course->field_fachgebiet[LANGUAGE_NONE][0]['tid'];
    }
    $graduations = taxonomy_term_load_multiple($tids);

    foreach ($graduations as $graduation) {
      $options .= '<option value="' . check_plain($graduation->tid) . '"">' . check_plain($graduation->name) . "</option>\n";
    }
  }
  // output select options
  drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
  print $options;
  drupal_exit();
}

/**
 * Gets all courses of a specific education degree.
 *
 * @param $segment_tid	int The term id of the segment.
 * @param $graduation  	int The term id of the graduation.
 */
function _hso_get_courses_callback($segment_tid, $graduation) {
  // load courses
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'course')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_segment', 'tid', $segment_tid)
    ->fieldCondition('field_fachgebiet', 'tid', $graduation);
  $result = $query->execute();
  $options = '<option value="-1" selected="selected">' . t('- Wähle einen Lehrgang -') . "</option>\n";
  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $courses = node_load_multiple($nids);

    foreach ($courses as $course) {
      $options .= '<option value="' . check_plain($course->nid) . '"">' . check_plain($course->title) . "</option>\n";
    }
  }
  // output select options
  drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
  print $options;
  drupal_exit();
}

function _hso_get_specific_course_callback($course_nid) {
  $course  = node_load($course_nid);
  $options = '<option value="' . check_plain($course->nid) . '"">' . check_plain($course->title) . "</option>\n";
  // output select options
  drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
  print $options;
  drupal_exit();
}

/**
 * Define a custom select list displaying all available courses.
 *
 */
function hso_mods_webform_select_options_info() {
  $items = array();

  $items['segments'] = array(
    'title' => t('Segments'),
    'options callback' => '_webform_select_options_taxonomy',
    'options arguments' => array ('segments'),
  );

  $items['graduation'] = array(
    'title' => t('Graduation'),
    'options callback' => '_webform_select_options_taxonomy',
    'options arguments' => array ('menugroup'),
  );

  $items['courses'] = array(
    'title' => t('Courses'),
    'options callback' => '_webform_select_options_entities',
    'options arguments' => array ('course'),
  );

  return $items;
}

/**
 * Creates a list of all available terms of a certain taxonomy.
 */
function _webform_select_options_taxonomy ($component, $flat, $arguments) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term')
    ->entityCondition('bundle', $arguments[0]);
  $result = $query->execute();
  if (isset($result['taxonomy_term'])) {
    $tids = array_keys($result['taxonomy_term']);
    $terms = taxonomy_term_load_multiple($tids);

    $list = array();
    if ($arguments[0] == 'segments') {
      // add default option
      $list[-1] = t('- Bereich wählen -');
    }
    foreach ($terms as $term) {
      $list[$term->tid] = $term->name;
    }
    return $list;
  }

  return null;
}

/**
 * Creates a list of all available entities of a certain type.
 *
 * @param $bundle The bundle (type) of the entities.
 *
 * @return array|null list of entities.
 */
function _webform_select_options_entities ($component, $flat, $arguments) {
  // load courses
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $arguments[0])
    ->propertyCondition('status', 1);
  $result = $query->execute();
  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $nodes = node_load_multiple($nids);

    $list = array();
    foreach ($nodes as $node) {
      $list[$node->nid] = $node->title;
    }
    return $list;
  }

  return null;
}


/* --------------------------------------------------
 * Tweet and instagram node creation on feed import
 * (see Twitter and Instagram_social_feed modules)
 * --------------------------------------------------*/

/**
 * Saves all imported tweets to a Tweet node.
 *
 * @param array $statuses
 *   The statuses that were saved.
 * @param object $account
 *   User account object.
 *
 * @see twitter_fetch_user_timeline()
 */
function hso_mods_twitter_insert_statuses($statuses, $account) {
  //
  // import all new tweets (statuses) of an account into tweet nodes
  $full_name = $account->name;
  $screen_name = $account->screen_name;
  $filename = $screen_name . '_profile_image';
  $profile_image = _import_picture($filename, $account->profile_image_url);

  foreach ($statuses as $tweet) {
    //
    // check if tweet is already imported
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'tweet')
      ->fieldCondition('field_twitter_id', 'value', $tweet->id);
    $result = $query->execute();

    // import new tweets
    if (!isset($result['node'])) {
      $node = new stdClass();
      $node->type = 'tweet';
      $node->language = LANGUAGE_NONE;
      $node->uid = 1;
      $node->status = 1;
      node_object_prepare($node);

      // assign all fields
      $node->title = $full_name;
      $node->field_profile_image[LANGUAGE_NONE][0]['fid'] = $profile_image->fid;
      $node->field_twitter_id[LANGUAGE_NONE][0]['value'] = $tweet->id;
      $node->field_screen_name[LANGUAGE_NONE][0]['value'] = $screen_name;
      $node->field_created_time[LANGUAGE_NONE][0]['value'] = strtotime($tweet->created_at);
      $node->created = strtotime($tweet->created_at);
      $node->body[LANGUAGE_NONE][0]['value'] = $tweet->text;

      // save node
      $node = node_submit($node);
      node_save($node);
    }
  }

  // delete tweet nodes older than configured time
  if ($age = variable_get('twitter_expire', 0)) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'tweet')
      ->fieldCondition('field_screen_name', 'value', $screen_name)
      ->fieldCondition('field_created_time', 'value', REQUEST_TIME - $age, '<');
    $result = $query->execute();

    if (isset($result['node'])) {
      node_delete_multiple(array_keys($result['node']));
    }
  }

}


/**
 * Notifies of a newly saved instagram media item.
 *
 * @param $type  string
 *    The type of the instagram media (image, video)
 * @param $item
 *    The instagram media item object
 *   stdClass containing the instagram media item.
 * @see https://www.instagram.com/developer/endpoints/media/ for details about the contents of $item.
 */
function hso_mods_instagram_media_save($type, $item) {
  //
  // save only image (no video)
  if ($type != 'image') return;

  $filename = $type . $item->instagram_id;
  $picture = _import_picture($filename, $item->standard_resolution);
  $caption = ($item->caption && $item->caption->text) ? $item->caption->text : '';

  $node = new stdClass();
  $node->type = 'instagram';
  $node->language = LANGUAGE_NONE;
  $node->uid = 1;
  $node->status = 1;
  node_object_prepare($node);

  // assign all fields
  $node->title = $filename;
  $node->field_post_id[LANGUAGE_NONE][0]['value'] = $item->instagram_id;
  $node->field_picture[LANGUAGE_NONE][0]['fid'] = $picture->fid;
  $node->field_created_time[LANGUAGE_NONE][0]['value'] = $item->created_time;
  $node->created = $item->created_time;
  $node->field_link[LANGUAGE_NONE][0]['url'] = $item->instagram_link;
  $node->field_instagram_user[LANGUAGE_NONE][0]['value'] = $item->instagram_user;
  $node->field_instagram_tags[LANGUAGE_NONE][0]['value'] = $item->tags;
  $node->body[LANGUAGE_NONE][0]['value'] = $caption;

  // save node
  $node = node_submit($node);
  node_save($node);
}


function _import_picture($unique_name, $uri) {
  // download file and manage it
  $ext = '.' . pathinfo($uri, PATHINFO_EXTENSION);
  $filename = $unique_name . $ext;

  // get or create user picture object
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'file')
    ->propertyCondition('filename', $filename)
    ->range(0, 1);
  $result = $query->execute();

  if (isset($result['file'])) {
    // get existing
    $file = file_load(key($result['file']));

  } else {
    $file = system_retrieve_file($uri, 'public://images/' . $filename, TRUE, FILE_EXISTS_REPLACE);
  }
  return $file;
}
